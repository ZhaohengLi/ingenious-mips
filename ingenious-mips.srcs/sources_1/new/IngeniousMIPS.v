module IngeniousMIPS(
    input wire clk_50M,           //50MHz æ—¶é’Ÿè¾“å…¥
    input wire clk_11M0592,       //11.0592MHz æ—¶é’Ÿè¾“å…¥
    
    input wire clock_btn,         //BTN5æ‰‹åŠ¨æ—¶é’ŸæŒ‰é’®å¼€å…³ï¼Œå¸¦æ¶ˆæŠ–ç”µè·¯ï¼ŒæŒ‰ä¸‹æ—¶ä¸º1
    input wire reset_btn,         //BTN6æ‰‹åŠ¨å¤?ä½?æŒ‰é’®å¼€å…³ï¼Œå¸¦æ¶ˆæŠ–ç”µè·¯ï¼ŒæŒ‰ä¸‹æ—¶ä¸º1
    
    //ROM
    input wire [31:0] rom_dataIN,
    output wire [31:0] rom_addrOUT,
    output wire rom_ce, //ROM chip enable
    
    input  wire[3:0]  touch_btn,  //BTN1~BTN4ï¼ŒæŒ‰é’®å¼€å…³ï¼ŒæŒ‰ä¸‹æ—¶ä¸º1
    input  wire[31:0] dip_sw,     //32ä½?æ‹¨ç ?å¼€å…³ï¼Œæ‹¨åˆ°"ON"æ—¶ä¸º1
    output wire[15:0] leds,       //16ä½?LEDï¼Œè¾“å‡ºæ—¶1ç‚¹äº®
    output wire[7:0]  dpy0,       //æ•°ç ?ç®¡ä½Žä½?ä¿¡å?·ï¼ŒåŒ…æ‹¬å°?æ•°ç‚¹ï¼Œè¾“å‡º1ç‚¹äº®
    output wire[7:0]  dpy1,       //æ•°ç ?ç®¡é«˜ä½?ä¿¡å?·ï¼ŒåŒ…æ‹¬å°?æ•°ç‚¹ï¼Œè¾“å‡º1ç‚¹äº®

    //CPLDä¸²å?£æŽ§åˆ¶å™¨ä¿¡å?·
    output wire uart_rdn,         //è¯»ä¸²å?£ä¿¡å?·ï¼Œä½Žæœ‰æ•ˆ
    output wire uart_wrn,         //å†™ä¸²å?£ä¿¡å?·ï¼Œä½Žæœ‰æ•ˆ
    input wire uart_dataready,    //ä¸²å?£æ•°æ?®å‡†å¤‡å¥½
    input wire uart_tbre,         //å?‘é€?æ•°æ?®æ ‡å¿—
    input wire uart_tsre,         //æ•°æ?®å?‘é€?å®Œæ¯•æ ‡å¿—

    //BaseRAMä¿¡å?·
    inout wire[31:0] base_ram_data,  //BaseRAMæ•°æ?®ï¼Œä½Ž8ä½?ä¸ŽCPLDä¸²å?£æŽ§åˆ¶å™¨å…±äº«
    output wire[19:0] base_ram_addr, //BaseRAMåœ°å?€
    output wire[3:0] base_ram_be_n,  //BaseRAMå­—èŠ‚ä½¿èƒ½ï¼Œä½Žæœ‰æ•ˆã€‚å¦‚æžœä¸?ä½¿ç”¨å­—èŠ‚ä½¿èƒ½ï¼Œè¯·ä¿?æŒ?ä¸º0
    output wire base_ram_ce_n,       //BaseRAMç‰‡é€‰ï¼Œä½Žæœ‰æ•ˆ
    output wire base_ram_oe_n,       //BaseRAMè¯»ä½¿èƒ½ï¼Œä½Žæœ‰æ•ˆ
    output wire base_ram_we_n,       //BaseRAMå†™ä½¿èƒ½ï¼Œä½Žæœ‰æ•ˆ

    //ExtRAMä¿¡å?·
    inout wire[31:0] ext_ram_data,  //ExtRAMæ•°æ?®
    output wire[19:0] ext_ram_addr, //ExtRAMåœ°å?€
    output wire[3:0] ext_ram_be_n,  //ExtRAMå­—èŠ‚ä½¿èƒ½ï¼Œä½Žæœ‰æ•ˆã€‚å¦‚æžœä¸?ä½¿ç”¨å­—èŠ‚ä½¿èƒ½ï¼Œè¯·ä¿?æŒ?ä¸º0
    output wire ext_ram_ce_n,       //ExtRAMç‰‡é€‰ï¼Œä½Žæœ‰æ•ˆ
    output wire ext_ram_oe_n,       //ExtRAMè¯»ä½¿èƒ½ï¼Œä½Žæœ‰æ•ˆ
    output wire ext_ram_we_n,       //ExtRAMå†™ä½¿èƒ½ï¼Œä½Žæœ‰æ•ˆ

    //ç›´è¿žä¸²å?£ä¿¡å?·
    output wire txd,  //ç›´è¿žä¸²å?£å?‘é€?ç«¯
    input  wire rxd,  //ç›´è¿žä¸²å?£æŽ¥æ”¶ç«¯

    //Flashå­˜å‚¨å™¨ä¿¡å?·ï¼Œå?‚è€ƒ JS28F640 èŠ¯ç‰‡æ‰‹å†Œ
    output wire [22:0]flash_a,      //Flashåœ°å?€ï¼Œa0ä»…åœ¨8bitæ¨¡å¼?æœ‰æ•ˆï¼Œ16bitæ¨¡å¼?æ— æ„?ä¹‰
    inout  wire [15:0]flash_d,      //Flashæ•°æ?®
    output wire flash_rp_n,         //Flashå¤?ä½?ä¿¡å?·ï¼Œä½Žæœ‰æ•ˆ
    output wire flash_vpen,         //Flashå†™ä¿?æŠ¤ä¿¡å?·ï¼Œä½Žç”µå¹³æ—¶ä¸?èƒ½æ“¦é™¤ã€?çƒ§å†™
    output wire flash_ce_n,         //Flashç‰‡é€‰ä¿¡å?·ï¼Œä½Žæœ‰æ•ˆ
    output wire flash_oe_n,         //Flashè¯»ä½¿èƒ½ä¿¡å?·ï¼Œä½Žæœ‰æ•ˆ
    output wire flash_we_n,         //Flashå†™ä½¿èƒ½ä¿¡å?·ï¼Œä½Žæœ‰æ•ˆ
    output wire flash_byte_n,       //Flash 8bitæ¨¡å¼?é€‰æ‹©ï¼Œä½Žæœ‰æ•ˆã€‚åœ¨ä½¿ç”¨flashçš„16ä½?æ¨¡å¼?æ—¶è¯·è®¾ä¸º1

    //USB æŽ§åˆ¶å™¨ä¿¡å?·ï¼Œå?‚è€ƒ SL811 èŠ¯ç‰‡æ‰‹å†Œ
    output wire sl811_a0,
    //inout  wire[7:0] sl811_d,     //USBæ•°æ?®çº¿ä¸Žç½‘ç»œæŽ§åˆ¶å™¨çš„dm9k_sd[7:0]å…±äº«
    output wire sl811_wr_n,
    output wire sl811_rd_n,
    output wire sl811_cs_n,
    output wire sl811_rst_n,
    output wire sl811_dack_n,
    input  wire sl811_intrq,
    input  wire sl811_drq_n,

    //ç½‘ç»œæŽ§åˆ¶å™¨ä¿¡å?·ï¼Œå?‚è€ƒ DM9000A èŠ¯ç‰‡æ‰‹å†Œ
    output wire dm9k_cmd,
    inout  wire[15:0] dm9k_sd,
    output wire dm9k_iow_n,
    output wire dm9k_ior_n,
    output wire dm9k_cs_n,
    output wire dm9k_pwrst_n,
    input  wire dm9k_int,

    //å›¾åƒ?è¾“å‡ºä¿¡å?·
    output wire[2:0] video_red,    //çº¢è‰²åƒ?ç´ ï¼Œ3ä½?
    output wire[2:0] video_green,  //ç»¿è‰²åƒ?ç´ ï¼Œ3ä½?
    output wire[1:0] video_blue,   //è“?è‰²åƒ?ç´ ï¼Œ2ä½?
    output wire video_hsync,       //è¡Œå?Œæ­¥ï¼ˆæ°´å¹³å?Œæ­¥ï¼‰ä¿¡å?·
    output wire video_vsync,       //åœºå?Œæ­¥ï¼ˆåž‚ç›´å?Œæ­¥ï¼‰ä¿¡å?·
    output wire video_clk,         //åƒ?ç´ æ—¶é’Ÿè¾“å‡º
    output wire video_de           //è¡Œæ•°æ?®æœ‰æ•ˆä¿¡å?·ï¼Œç”¨äºŽåŒºåˆ†æ¶ˆéš?åŒº
);

    assign leds = dip_sw[15:0];
    
    //PIPELINE START
    //pcadder
    wire [31:0] adder_pc_in;
    wire [31:0] adder_pc_out;
    //if id
    wire [31:0] if_inst_Addr_i;
    wire [31:0] id_inst_Addr_i;
    wire [31:0] id_inst_i;
    
    //IDregister
    wire [7:0] id_aluOp_o;
    wire [2:0] id_aluSel_o;
    wire [31:0] id_operand1_o;
    wire [31:0] id_operand2_o;
    wire [4:0] id_regWriteAddr_o; //target register's address
    wire id_regWritEnablee_o;
    
    //ID-EX 
    wire [2:0] ex_aluSel_i;
    wire [7:0] ex_aluOp_i;
    wire [31:0] ex_operand1_i;
    wire [31:0] ex_operand2_i;
    wire [4:0] ex_regWriteAddr_i;
    wire ex_regWriteEnable_i;
    
    //EX
    wire ex_regWriteEnable_o;
    wire [31:0] ex_regWriteData_o;
    wire [4:0] ex_regWriteAddr_o;
    
    //exmem
    wire mem_regWriteEnable_i;
    wire [31:0] mem_regWriteData_i;
    wire [4:0] mem_regWriteAddr_i;
    
    //mem
    wire mem_regWriteEnable_o;
    wire [31:0] mem_regWriteData_o;
    wire [4:0] mem_regWriteAddr_o;
    
    //memwb
    wire wb_regWriteEnable_i;
    wire [31:0] wb_regWriteData_i;
    wire [4:0] wb_regWriteAddr_i;
    
    //register.v
    wire enread1; //enable read1
    wire enread2;
    wire [31:0] reg_data1_i;
    wire [31:0] reg_data2_i;
    wire [4:0] reg1_Addr_i;
    wire [4:0] reg2_Addr_i;
    
    //pc.v
    PC pc1(
        .clk(clock_btn),  .rst(reset_btn),
        .inst_Addr_i(if_inst_Addr_i), .inst_Addr_o(adder_pc_in),
        .ce_o(rom_ce)
    );
    //pcadder.v
    PC_Adder pc_Adder1(
        .pc_in(adder_pc_in), .pc_out(adder_pc_out)
    );
    assign rom_addrOUT = adder_pc_out;
    
    //ifid
    IF_ID if_id1(
        .clk(clock_btn),  .rst(reset_btn),
        .inst_Addr_i(if_inst_Addr_i), .inst_i(rom_dataIN),
        .inst_Addr_o(id_inst_Addr_i), .inst_o(id_inst_i)
    );
    
    //IDRegister
    ID id1(
        .rst(reset_btn),  .inst_Addr_i(id_inst_Addr_i),
        .inst_i(id_inst_i),  
        //from registers
        .reg1Data_i(reg_data1_i), reg2Data_i(reg_data2_i),
        //send to registers 
        .reg1Enable_o(enread1), .reg2Enable_o(enread2),
        .reg1Addr_o(reg1_Addr_i), .reg1Addr_o(reg2_Addr_i),
        //send to idex
        .aluOp_o(id_aluOp_o), .aluSel_o(id_aluSel_o),
        .operand1_o(id_operand1_o), .operand2regWritEnablee_o(id_regWritEnablee_o)
    );
    
    //Registers
    REG REG1(
        .clk(clock_btn), .rst(reset_btn),
        .regWriteEnable_i(wb_regWriteData_i), .regWriteAddr_i(wb_regWriteAddr_i),
        .regWriteData_i(wb_regWriteData_i), .reg1Enable_i(enread1),
        .reg1Addr_i(reg1_Addr_i), .reg1Data_o(reg_data1_i),
        .reg2Enable_i(enread2), .reg2Addr_i(reg2_Addr_i),
        .reg2Data_o(reg_data2_i)
    );
    
    //ID/EX
    ID_EX id_ex1(
        .clk(clock_btn), .rst(reset_btn),
        
        .aluSel_i(id_aluSel_o), .aluOp_i(id_aluOp_o),
        .operand1_i(id_operand1_o), .operand2_i(id_operand2_o),
        .regWriteAddr_i(id_regWriteAddr_o), .regWriteEnable_i(id_regWritEnablee_o),
        
        .aluSel_o(ex_aluSel_i), .aluOp_o(ex_aluOp_i),
        .operand1_o(ex_operand1_i), .operand2_o(ex_operand2_i),
        .regWriteAddr_o(ex_regWriteAddr_i), .regWriteEnable_o(ex_regWriteEnable_i)
    );

    //ex
    EX ex1(
        .rst(reset_btn),  .aluSel_i(ex_aluSel_i),
        .aluOp_i(ex_aluOp_i), .operand1_i(ex_operand1_i),
        .operand2_i(ex_operand2_i), .regWriteAddr_i(ex_regWriteAddr_i),
        .regWriteEnable_i(ex_regWriteEnable_i),
        .regWriteEnable_o(ex_regWriteEnable_o), .regWriteAddr_o(ex_regWriteAddr_o),
        .regWriteData_o(ex_regWriteData_o)
        
    );
    
    //exmem
    EX_MEM ex_mem1(
        .rst(reset_btn), .clk(clock_btn),
        .regWriteAddr_i(ex_regWriteAddr_o), .regWriteEnable_i(ex_regWriteEnable_o),
        .regWriteData_i(ex_regWriteData_o), .regWriteAddr_o(mem_regWriteAddr_i),
        .regWriteEnable_o(mem_regWriteEnable_i), .regWriteData_o(mem_regWriteData_i)
    );
    
    //mem
    MEM mem1(
        .rst(reset_btn), .regWriteAddr_i(mem_regWriteAddr_i),
        .regWriteEnable_i(mem_regWriteEnable_i), .regWriteData_i(mem_regWriteData_i),
        .regWriteAddr_o(mem_regWriteAddr_o),   .regWriteEnable_o(mem_regWriteEnable_o),
        .regWriteData_o(mem_regWriteData_o)
    );
    
    //memwb
    MEM_WB mem_wb1(
        .rst(reset_btn), .clk(clock_btn),
        .regWriteAddr_i(mem_regWriteAddr_o), .regWriteEnable_i(mem_regWriteEnable_o),
        .regWriteData_i(mem_regWriteData_o), .regWriteAddr_o(wb_regWriteAddr_i),
        .regWriteEnable_o(wb_regWriteEnable_i), .regWriteData_o(wb_regWriteData_i)
    );
    //PIPELINE END

endmodule